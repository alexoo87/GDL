!===============================================================================================
!	시스템창호N
!===============================================================================================
! project2	3,	270,	3

!	W.P
hotspot2	0,	0,	unID	:	unID = unID + 1


!	2D 표현 끄기
!-----------------------------------------------------------------------------------------------
if	b2DOff	then
	_frmThk = max(frmThkL, frmThkR)

	hotspot2	0,		-(_frmThk + gskThk),	unID	:	unID = unID + 1
	hotspot2	ctwWdt,	-(_frmThk + gskThk),	unID	:	unID = unID + 1
	hotspot2	ctwWdt,	0,						unID	:	unID = unID + 1

	fill	65

	put	0,		0,						1,
		ctwWdt,	0,						1,
		ctwWdt,	-(_frmThk + gskThk),	1,
		0,		-(_frmThk + gskThk),	1

	poly2_b	nsp/3,	2+4,	0,	0,	get(nsp)

	end
endif
 
!	천정도 표현
!-----------------------------------------------------------------------------------------------
r = request("floor_plan_option", "", storyViewType)

if	storyViewType > eps	then
	_frmThk = max(frmThkL, frmThkR)

	hotspot2	0,		-(_frmThk + gskThk),	unID	:	unID = unID + 1
	hotspot2	ctwWdt,	-(_frmThk + gskThk),	unID	:	unID = unID + 1
	hotspot2	ctwWdt,	0,						unID	:	unID = unID + 1

	pen		ceilPen
	fill	65

	put	0,										0,						1,
		ctwWdt,									0,						0,
		ctwWdt - (_frmThk + gskThk)*tan(aFrmR),	-(_frmThk + gskThk),	1,
		(_frmThk + gskThk)*tan(aFrmL),			-(_frmThk + gskThk),	0

	poly2_b	nsp/3,	1+2+4,	0,	0,	get(nsp)

	end
endif

!	수직프레임 Index
VFRAME_CORNER = 1
VFRAME_MULLION = 2

!-----------------------------------------------------------------------------------------------
!	Hotspot
!-----------------------------------------------------------------------------------------------
!	코너프레임 회전각도
if	iFrmTypeL = FRAME_MULLION	then
	_spotLthL = (frmThkL + gskThk)/cos(aFrmL)
	hotspot2	0,						-_spotLthL,				unID,	aFrmL,	4	:	unID = unID + 1
	hotspot2	_spotLthL*sin(aFrmL),	-_spotLthL*cos(aFrmL),	unID,	aFrmL,	5	:	unID = unID + 1
	hotspot2	0,						0,						unID,	aFrmL,	6	:	unID = unID + 1
endif

if	iFrmTypeR = FRAME_MULLION	then
	_spotLthR = (frmThkR + gskThk)/cos(aFrmR)
	add2	ctwWdt,	0
		hotspot2	0,						-_spotLthR,				unID,	aFrmR,	4		:	unID = unID + 1
		hotspot2	-_spotLthR*sin(aFrmR),	-_spotLthR*cos(aFrmR),	unID,	aFrmR,	5		:	unID = unID + 1
		hotspot2	0,						0,						unID,	aFrmR,	6+512	:	unID = unID + 1
	del 1
endif

!	수직프레임 간격
for	i = 1	to	(nMln + 1)
	hotspot2	0,			0,	unID,	mlnGap[i],	1+128	:	unID = unID + 1
	hotspot2	-1,			0,	unID,	mlnGap[i],	3		:	unID = unID + 1
	hotspot2	mlnGap[i],	0,	unID,	mlnGap[i],	2		:	unID = unID + 1

	add2	mlnGap[i],	0
next	i

del (nMln + 1)


!-----------------------------------------------------------------------------------------------
!	2D Display
!-----------------------------------------------------------------------------------------------
if	not(iDisplay = DISPLAY_SYMBOLIC)	then
	!	채우기
	_frmThk = max(frmThkL, frmThkR)

	fill	65

	put	0,										0,						1,
		ctwWdt,									0,						1,
		ctwWdt - (_frmThk + gskThk)*tan(aFrmR),	-(_frmThk + gskThk),	1,
		(_frmThk + gskThk)*tan(aFrmL),			-(_frmThk + gskThk),	1

	poly2_b	nsp/3,	2+4,	0,	0,	get(nsp)


	!	Height of Plane
	_cutPlaneHgt = GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[1]
	_topPlaneHgt = GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[2]
	_btmPlaneHgt = GLOB_CSTORY_ELEV - GLOB_HSTORY_ELEV + GLOB_CUTPLANES_INFO[3]
	if	iProjectTo = PROJECTTO_ABSOLUTE	then
		_btmPlaneHgt = GLOB_CUTPLANES_INFO[4]
	endif

	_bCutPlane = (iDisplay = DISPLAY_PROJECTED | iDisplay = DISPLAY_WITHOVERHEAD)

	!	절단면/하단면
	if	_bCutPlane	then
		!	절단면
		pen			cutPen
		fill		cutFill
		line_type	1

		project2{3}	3,	270,	2+16,	2,	cutBackPen,
			parameters	bSymbol			= 1,
						iProjectType	= 1,
						cutPlaneHgt		= _cutPlaneHgt,
						topPlaneHgt		= _topPlaneHgt,
						btmPlaneHgt		= _btmPlaneHgt

		!	하단면
		pen			btmPen
		fill		btmFill
		line_type	1

		project2{3}	3,	270,	2+16,	4+8,	btmBackPen,
			parameters	bSymbol			= 1,
						iProjectType	= 1,
						cutPlaneHgt		= _cutPlaneHgt,
						topPlaneHgt		= _topPlaneHgt,
						btmPlaneHgt		= _btmPlaneHgt
	endif

	!	Overhead
	if	iDisplay = DISPLAY_WITHOVERHEAD	then
		pen			overPen
		line_type	overLT

		project2{3}	3,	270,	2+32,	2+8,
			parameters	bSymbol			= 1,
						iProjectType	= 2,
						cutPlaneHgt		= _cutPlaneHgt,
						topPlaneHgt		= _topPlaneHgt,
						btmPlaneHgt		= _btmPlaneHgt
	endif

	!	Outlines only
	if	iDisplay = DISPLAY_OUTLINES	then
		!	하단면
		pen			btmPen
		fill		btmFill
		line_type	1

		project2{3}	3,	270,	3+32,	2+4+8,	btmBackPen,
			parameters	bSymbol			= 1,
						iProjectType	= 1,
						cutPlaneHgt		= _topPlaneHgt,
						topPlaneHgt		= _topPlaneHgt,
						btmPlaneHgt		= _btmPlaneHgt
	endif

	!	Overhead all
	if	iDisplay = DISPLAY_OVERHEAD	then
		!	하단면
		pen			overPen
		line_type	overLT

		project2{3}	3,	270,	2+32,	2+8,
			parameters	bSymbol			= 1,
						iProjectType	= 2,
						cutPlaneHgt		= _btmPlaneHgt,
						topPlaneHgt		= _topPlaneHgt,
						btmPlaneHgt		= _btmPlaneHgt
	endif

	!	Hotspot
	for	i = 1	to	(nMln + 1)
		if	bDoor[i]	then
			_rDoor = i MOD 2
			if	_rDoor < eps	then
				_yHotspotPos = -0.005
			else
				_yHotspotPos = 0
			endif

			add2	0,	-(mlnThk + gskThk)/2 + _yHotspotPos
				hotspot2	0,					0,	unID,	iM_Length[i][6],	1+128	:	unID = unID + 1
				hotspot2	-1,					0,	unID,	iM_Length[i][6],	3		:	unID = unID + 1
				hotspot2	iM_Length[i][6],	0,	unID,	iM_Length[i][6],	2,	iM_Length[i][6],	"좌측 고정창 너비"		:	unID = unID + 1

				add2	mlnGap[i],	0
					hotspot2	0,					0,	unID,	iM_Length[i][7],	1+128	:	unID = unID + 1
					hotspot2	1,					0,	unID,	iM_Length[i][7],	3		:	unID = unID + 1
					hotspot2	-iM_Length[i][7],	0,	unID,	iM_Length[i][7],	2,	iM_Length[i][7],	"우측 고정창 너비"		:	unID = unID + 1
				del 1
			del 1
		endif

		add2	mlnGap[i],	0
	next	i

	del (nMln + 1)
endif

!-----------------------------------------------------------------------------------------------
!	Symbolic View	
!-----------------------------------------------------------------------------------------------
if	iDisplay = DISPLAY_SYMBOLIC	then
	fill	65
	fillPen = 255
	backPen = 0

	!	수직프레임
	!-----------------------------------------------------------------------------------------------
	drawindex	50
	_frmType = iFrmTypeL
	_frmClass = VFRAME_CORNER
	_frmWdt = frmWdtL
	_frmThk = frmThkL
	_gskWdt = gskWdtL
	_aFrm = aFrmL
	_iMlnType = iMlnType
	if	not(bFrmCapL)	then	_iMlnType = MLN_TYPE1

	gosub	"vFrame"

	_frmType = iFrmTypeR
	_frmClass = VFRAME_CORNER
	_frmWdt = frmWdtR
	_frmThk = frmThkR
	_gskWdt = gskWdtR
	_aFrm = aFrmR
	_iMlnType = iMlnType
	if	not(bFrmCapR)	then	_iMlnType = MLN_TYPE1

	add2	ctwWdt,	0
		mul2	-1,	1
			gosub	"vFrame"
		del 1
	del 1

	_bMln = (nMln > eps)
	if	_bMln	then
		_frmClass = VFRAME_MULLION
		_frmWdt = mlnWdt
		_frmThk = mlnThk
		_gskWdt = mlnGskWdt
		_aFrm = 0
		_iMlnType = iMlnType

		for	i = 1	to	nMln
			add2	mlnGap[i],	0

			gosub	"vFrame"
		next	i

		del nMln
	endif

	!	패널/하부라인
	!-----------------------------------------------------------------------------------------------
	for	i = 1	to	(nMln + 1)
		!	변수 정의
		_bDoor = bDoor[i]

		if	iFrmTypeL = FRAME_BOUNDARY	then
			_xPanel_LT = (frmWdtL + gskWdtL)/2
			_xPanel_LB = (frmWdtL + gskWdtL)/2

			_xEtc_LT = (frmWdtL + gskWdtL)/2
			_xEtc_LB = frmWdtL
		else
			if	abs(aFrmL) < eps	then
				_xPanel_LT = gskWdtL/2
				_xPanel_LB = gskWdtL/2

				_xEtc_LT = gskWdtL/2
				_xEtc_LB = frmWdtL/2
			else
				if	glsThk + glsLct + ((frmWdtL - gskWdtL)/2)*sin(aFrmL) > eps	then
					_xPanel_LT = (gskThk - glsThk - glsLct)*tan(aFrmL) + (gskWdtL/2)/cos(aFrmL)
				else
					_xPanel_LT = (gskThk)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL) + (glsThk)/tan(aFrmL)
				endif

				! if	(90 - aFrmL) > eps	then
				! 	_xPanel_LB = (gskThk - glsLct)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL) - ((frmWdtL - gskWdtL)/2)/cos(aFrmL)
				! else
				! 	_xPanel_LB = (gskThk)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL)
				! 	_xPanel_LB = (gskThk - glsLct)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL) - ((frmWdtL - gskWdtL)/2)/cos(aFrmL)
				! endif

				if	glsLct + ((frmWdtL - gskWdtL)/2)*sin(aFrmL) > eps	then
					_xPanel_LB = (gskThk - glsLct)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL) - ((frmWdtL - gskWdtL)/2)/cos(aFrmL)
				else
					_xPanel_LB = (gskThk - glsLct)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL) + glsLct*tan(aFrmL) + glsLct/tan(aFrmL)
				endif

				_xEtc_LT = (gskWdtL/2)/cos(aFrmL)
				_xEtc_LB = (frmThkB + gskThk)*tan(aFrmL) + (frmWdtL/2)/cos(aFrmL)
			endif
		endif

		if	iFrmTypeR = FRAME_BOUNDARY	then
			_xPanel_RT = (frmWdtR + gskWdtR)/2
			_xPanel_RB = (frmWdtR + gskWdtR)/2

			_xEtc_RT = (frmWdtR + gskWdtR)/2
			_xEtc_RB = frmWdtR
		else
			if	abs(aFrmR) < eps	then
				_xPanel_RT = gskWdtR/2
				_xPanel_RB = gskWdtR/2

				_xEtc_RT = gskWdtR/2
				_xEtc_RB = frmWdtR/2
			else
				if	glsThk + glsLct + ((frmWdtR - gskWdtR)/2)*sin(aFrmR) > eps	then
					_xPanel_RT = (gskThk - glsThk - glsLct)*tan(aFrmR) + (gskWdtR/2)/cos(aFrmR)
				else
					_xPanel_RT = (gskThk)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR) + glsThk/tan(aFrmR)
				endif
				! if	(90 - aFrmR) > eps	then
				! 	_xPanel_RB = (gskThk)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR) - ((frmWdtR - gskWdtR)/2)/cos(aFrmR)
				! else
				! 	_xPanel_RB = (gskThk)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR)
				! endif

				if	glsLct + ((frmWdtR - gskWdtR)/2)*sin(aFrmR) > eps	then
					_xPanel_RB = (gskThk - glsLct)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR) - ((frmWdtR - gskWdtR)/2)/cos(aFrmR)
				else
					_xPanel_RB = (gskThk - glsLct)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR) + glsLct*tan(aFrmR) + glsLct/tan(aFrmR)
				endif

				_xEtc_RT = (gskWdtR/2)/cos(aFrmR)
				_xEtc_RB = (frmThkB + gskThk)*tan(aFrmR) + (frmWdtR/2)/cos(aFrmR)
			endif
		endif

		_yPanelT = -(gskThk - glsThk) + glsLct
		_yPanelB = -gskThk + glsLct

		_yEtcT = 0
		_yEtcB = -(frmThkB + gskThk)

		!	패널
		drawindex	20
		if	not(_bDoor)	then
			pen	symGlsPen
			if	nMln < eps	then
				line2	_xPanel_LT,	_yPanelT,	mlnGap[i] - _xPanel_RT,	_yPanelT
				line2	_xPanel_LB,	_yPanelB,	mlnGap[i] - _xPanel_RB,	_yPanelB
				hotline2	_xPanel_LT,	_yPanelT,	mlnGap[i] - _xPanel_RT,	_yPanelT,	unID	:	unID = unID + 1
				hotline2	_xPanel_LB,	_yPanelB,	mlnGap[i] - _xPanel_RB,	_yPanelB,	unID	:	unID = unID + 1
			else
				if	i = 1	then
					line2	_xPanel_LT,	_yPanelT,	mlnGap[i] - mlnGskWdt/2,	_yPanelT
					line2	_xPanel_LB,	_yPanelB,	mlnGap[i] - mlnGskWdt/2,	_yPanelB
					hotline2	_xPanel_LT,	_yPanelT,	mlnGap[i] - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
					hotline2	_xPanel_LB,	_yPanelB,	mlnGap[i] - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
				endif
				if	i # 1 & i # (nMln + 1)	then
					line2	mlnGskWdt/2,	_yPanelT,	mlnGap[i] - mlnGskWdt/2,	_yPanelT
					line2	mlnGskWdt/2,	_yPanelB,	mlnGap[i] - mlnGskWdt/2,	_yPanelB
					hotline2	mlnGskWdt/2,	_yPanelT,	mlnGap[i] - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
					hotline2	mlnGskWdt/2,	_yPanelB,	mlnGap[i] - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
				endif
				if	i = (nMln + 1)	then
					line2	mlnGskWdt/2,	_yPanelT,	mlnGap[i] - _xPanel_RT,	_yPanelT
					line2	mlnGskWdt/2,	_yPanelB,	mlnGap[i] - _xPanel_RB,	_yPanelB
					hotline2	mlnGskWdt/2,	_yPanelT,	mlnGap[i] - _xPanel_RT,	_yPanelT,	unID	:	unID = unID + 1
					hotline2	mlnGskWdt/2,	_yPanelB,	mlnGap[i] - _xPanel_RB,	_yPanelB,	unID	:	unID = unID + 1
				endif
			endif
		endif

		!	하부라인
		drawindex	10
		if	not(_bDoor)	then
			pen	symEtcPen
			if	nMln < eps	then
				line2	_xEtc_LT,	_yEtcT,	mlnGap[i] - _xEtc_RT,	_yEtcT
				line2	_xEtc_LB,	_yEtcB,	mlnGap[i] - _xEtc_RB,	_yEtcB
				hotline2	_xEtc_LT,	_yEtcT,	mlnGap[i] - _xEtc_RT,	_yEtcT,	unID	:	unID = unID + 1
				hotline2	_xEtc_LB,	_yEtcB,	mlnGap[i] - _xEtc_RB,	_yEtcB,	unID	:	unID = unID + 1

				if	frmThkB - frmThkL > eps	then
					line2	_xEtc_LB - (frmThkB - frmThkL)*tan(aFrmL),	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB
					hotline2	_xEtc_LB - (frmThkB - frmThkL)*tan(aFrmL),	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB,	unID	:	unID = unID + 1
				endif
				if	frmThkB - frmThkR > eps	then
					line2	mlnGap[i] - _xEtc_RB,	_yEtcB,	mlnGap[i] - _xEtc_RB - (frmThkB - frmThkR)*tan(aFrmR),	-(frmThkR + gskThk)
					hotline2	mlnGap[i] - _xEtc_RB,	_yEtcB,	mlnGap[i] - _xEtc_RB - (frmThkB - frmThkR)*tan(aFrmR),	-(frmThkR + gskThk),	unID	:	unID = unID + 1
				endif
			else
				if	i = 1	then
					line2	_xEtc_LT,	_yEtcT,	mlnGap[i] - mlnGskWdt/2,	_yEtcT
					line2	_xEtc_LB,	_yEtcB,	mlnGap[i] - mlnWdt/2,		_yEtcB
					hotline2	_xEtc_LT,	_yEtcT,	mlnGap[i] - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
					hotline2	_xEtc_LB,	_yEtcB,	mlnGap[i] - mlnWdt/2,		_yEtcB,	unID	:	unID = unID + 1

					if	frmThkB - frmThkL > eps	then
						line2	_xEtc_LB - (frmThkB - frmThkL)*tan(aFrmL),	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB
						hotline2	_xEtc_LB - (frmThkB - frmThkL)*tan(aFrmL),	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB,	unID	:	unID = unID + 1
					endif
					if	frmThkB - mlnThk > eps	then
						line2	mlnGap[i] - mlnWdt/2,	_yEtcB,	mlnGap[i] - mlnWdt/2,	-(mlnThk + gskThk)
						hotline2	mlnGap[i] - mlnWdt/2,	_yEtcB,	mlnGap[i] - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
					endif
				endif
				if	i # 1 & i # (nMln + 1)	then
					line2	mlnGskWdt/2,	_yEtcT,	mlnGap[i] - mlnGskWdt/2,	_yEtcT
					line2	mlnWdt/2,		_yEtcB,	mlnGap[i] - mlnWdt/2,		_yEtcB
					hotline2	mlnGskWdt/2,	_yEtcT,	mlnGap[i] - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
					hotline2	mlnWdt/2,		_yEtcB,	mlnGap[i] - mlnWdt/2,		_yEtcB,	unID	:	unID = unID + 1

					if	frmThkB - mlnThk > eps	then
						line2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk)
						line2	mlnGap[i] - mlnWdt/2,	_yEtcB,	mlnGap[i] - mlnWdt/2,	-(mlnThk + gskThk)
						hotline2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk),	unID	:	unID = unID + 1
						hotline2	mlnGap[i] - mlnWdt/2,	_yEtcB,	mlnGap[i] - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
					endif
				endif
				if	i = (nMln + 1)	then
					line2	mlnGskWdt/2,	_yEtcT,	mlnGap[i] - _xEtc_RT,	_yEtcT
					line2	mlnWdt/2,		_yEtcB,	mlnGap[i] - _xEtc_RB,	_yEtcB
					hotline2	mlnGskWdt/2,	_yEtcT,	mlnGap[i] - _xEtc_RT,	_yEtcT,	unID	:	unID = unID + 1
					hotline2	mlnWdt/2,		_yEtcB,	mlnGap[i] - _xEtc_RB,	_yEtcB,	unID	:	unID = unID + 1

					if	frmThkB - frmThkR > eps	then
						line2	mlnGap[i] - _xEtc_RB,	_yEtcB,	mlnGap[i] - _xEtc_RB + (frmThkB - frmThkR)*tan(aFrmR),	-(frmThkR + gskThk)
						hotline2	mlnGap[i] - _xEtc_RB,	_yEtcB,	mlnGap[i] - _xEtc_RB + (frmThkB - frmThkR)*tan(aFrmR),	-(frmThkR + gskThk),	unID	:	unID = unID +1
					endif
					if	frmThkB - mlnThk > eps	then
						line2	mlnWdt/2,	_yEtcB,	mlnWdt/2,	-(mlnThk + gskThk)
						hotline2	mlnWdt/2,	_yEtcB,	mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
					endif
				endif
			endif
		endif

		add2	mlnGap[i],	0
	next	i

	del (nMln + 1)

	!	문
	!-----------------------------------------------------------------------------------------------
	for	i = 1	to	(nMln + 1)
		!	변수 정의
		_bDoor = bDoor[i]
		_doorType = iM_Type[i][1]
		_openType = iM_Type[i][2]
		_openDirect = iM_Type[i][3]
		_symbol = iM_Type[i][5]

		_doorWdt = iM_Length[i][1]
		_doorWdtL = iM_Length[i][2]
		_doorWdtR = iM_Length[i][3]
		_doorThk = iM_Length[i][5]
		_fixWdtL = iM_Length[i][6]
		_fixWdtR = iM_Length[i][7]

		!	좌/우 고정창
		if	_bDoor	then
			!	변수
			if	iFrmTypeL = FRAME_BOUNDARY	then
				_xPanel_LT = (frmWdtL + gskWdtL)/2
				_xPanel_LB = (frmWdtL + gskWdtL)/2

				_xEtc_LT = (frmWdtL + gskWdtL)/2
				_xEtc_LB = frmWdtL
			else
				_xPanel_LT = gskWdtL/2
				_xPanel_LB = gskWdtL/2

				_xEtc_LT = gskWdtL/2
				_xEtc_LB = frmWdtL/2
			endif

			if	iFrmTypeR = FRAME_BOUNDARY	then
				_xPanel_RT = (frmWdtR + gskWdtR)/2
				_xPanel_RB = (frmWdtR + gskWdtR)/2

				_xEtc_RT = (frmWdtR + gskWdtR)/2
				_xEtc_RB = frmWdtR
			else
				_xPanel_RT = gskWdtR/2
				_xPanel_RB = gskWdtR/2

				_xEtc_RT = gskWdtR/2
				_xEtc_RB = frmWdtR/2
			endif

			_yPanelT = -(gskThk - glsThk) + glsLct
			_yPanelB = -gskThk + glsLct

			_yEtcT = 0
			_yEtcB = -(frmThkB + gskThk)

			!	Hotspot
			_rDoor = i MOD 2
			if	_rDoor < eps	then
				_yHotspotPos = -0.005
			else
				_yHotspotPos = 0
			endif

			add2	0,	-(mlnThk + gskThk)/2 + _yHotspotPos
				hotspot2	0,					0,	unID,	iM_Length[i][6],	1+128	:	unID = unID + 1
				hotspot2	-1,					0,	unID,	iM_Length[i][6],	3		:	unID = unID + 1
				hotspot2	iM_Length[i][6],	0,	unID,	iM_Length[i][6],	2,	iM_Length[i][6],	"좌측 고정창 너비"		:	unID = unID + 1

				add2	mlnGap[i],	0
					hotspot2	0,					0,	unID,	iM_Length[i][7],	1+128	:	unID = unID + 1
					hotspot2	1,					0,	unID,	iM_Length[i][7],	3		:	unID = unID + 1
					hotspot2	-iM_Length[i][7],	0,	unID,	iM_Length[i][7],	2,	iM_Length[i][7],	"우측 고정창 너비"		:	unID = unID + 1
				del 1
			del 1

			!	좌측고정창
			if	_fixWdtL > eps	then
				!	수직프레임
				drawindex	30
				add2	_fixWdtL,	0
					gosub	"vFrame_D"
				del 1

				!	패널
				drawindex	20
				pen	symGlsPen
				if	nMln < eps	then
					line2	_xPanel_LT,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT
					line2	_xPanel_LB,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB
					hotline2	_xPanel_LT,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
					hotline2	_xPanel_LB,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
				else
					if	i = 1	then
						line2	_xPanel_LT,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT
						line2	_xPanel_LB,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB
						hotline2	_xPanel_LT,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
						hotline2	_xPanel_LB,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
					else
						line2	mlnGskWdt/2,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT
						line2	mlnGskWdt/2,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB
						hotline2	mlnGskWdt/2,	_yPanelT,	_fixWdtL - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
						hotline2	mlnGskWdt/2,	_yPanelB,	_fixWdtL - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
					endif
				endif

				!	하부라인
				drawindex	10
				pen	symEtcPen

				if	nMln < eps	then
					line2	_xEtc_LT,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT
					line2	_xEtc_LB,	_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB
					hotline2	_xEtc_LT,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
					hotline2	_xEtc_LB,	_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

					if	frmThkB - frmThkL > eps	then
						line2	_xEtc_LB,	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB
						hotline2	_xEtc_LB,	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB,	unID	:	unID = unID + 1
					endif
					if	frmThkB - mlnThk > eps	then
						line2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk)
						hotline2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
					endif
				else
					if	i = 1	then
						line2	_xEtc_LT,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT
						line2	_xEtc_LB,	_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB
						hotline2	_xEtc_LT,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
						hotline2	_xEtc_LB,	_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

						if	frmThkB - frmThkL > eps	then
							line2	_xEtc_LB,	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB
							hotline2	_xEtc_LB,	-(frmThkL + gskThk),	_xEtc_LB,	_yEtcB,	unID	:	unID = unID + 1
						endif
						if	frmThkB - mlnThk > eps	then
							line2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk)
							hotline2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
						endif
					else
						line2	mlnGskWdt/2,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT
						line2	mlnWdt/2,		_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB
						hotline2	mlnGskWdt/2,	_yEtcT,	_fixWdtL - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
						hotline2	mlnWdt/2,		_yEtcB,	_fixWdtL - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

						if	frmThkB - mlnThk > eps	then
							line2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk)
							line2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk)
							hotline2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk),	unID	:	unID = unID + 1
							hotline2	_fixWdtL - mlnWdt/2,	_yEtcB,	_fixWdtL - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
						endif
					endif
				endif
			endif

			!	우측고정창
			if	_fixWdtR > eps	then
				add2	mlnGap[i],	0
					mul2	-1,	1

						!	수직프레임
						drawindex	30
						add2	_fixWdtR,	0
							gosub	"vFrame_D"
						del 1

						!	패널
						drawindex	20
						pen	symGlsPen
						if	nMln < eps	then
							line2	_xPanel_RT,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT
							line2	_xPanel_RB,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB
							hotline2	_xPanel_RT,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
							hotline2	_xPanel_RB,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
						else
							if	i = (nMln + 1)	then
								line2	_xPanel_RT,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT
								line2	_xPanel_RB,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB
								hotline2	_xPanel_RT,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
								hotline2	_xPanel_RB,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
							else
								line2	mlnGskWdt/2,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT
								line2	mlnGskWdt/2,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB
								hotline2	mlnGskWdt/2,	_yPanelT,	_fixWdtR - mlnGskWdt/2,	_yPanelT,	unID	:	unID = unID + 1
								hotline2	mlnGskWdt/2,	_yPanelB,	_fixWdtR - mlnGskWdt/2,	_yPanelB,	unID	:	unID = unID + 1
							endif
						endif

						!	하부라인
						drawindex	10
						pen	symEtcPen

						if	nMln < eps	then
							line2	_xEtc_RT,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT
							line2	_xEtc_RB,	_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB
							hotline2	_xEtc_RT,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
							hotline2	_xEtc_RB,	_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

							if	frmThkB - frmThkR > eps	then
								line2	_xEtc_RB,	-(frmThkR + gskThk),	_xEtc_RB,	_yEtcB
								hotline2	_xEtc_RB,	-(frmThkR + gskThk),	_xEtc_RB,	_yEtcB,	unID	:	unID = unID + 1
							endif
							if	frmThkB - mlnThk > eps	then
								line2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk)
								hotline2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
							endif
						else
							if	i = (nMln + 1)	then
								line2	_xEtc_RT,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT
								line2	_xEtc_RB,	_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB
								hotline2	_xEtc_RT,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
								hotline2	_xEtc_RB,	_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

								if	frmThkB - frmThkR > eps	then
									line2	_xEtc_RB,	-(frmThkR + gskThk),	_xEtc_RB,	_yEtcB
									hotline2	_xEtc_RB,	-(frmThkR + gskThk),	_xEtc_RB,	_yEtcB,	unID	:	unID = unID + 1
								endif
								if	frmThkB - mlnThk > eps	then
									line2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk)
									hotline2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
								endif
							else
								line2	mlnGskWdt/2,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT
								line2	mlnWdt/2,		_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB
								hotline2	mlnGskWdt/2,	_yEtcT,	_fixWdtR - mlnGskWdt/2,	_yEtcT,	unID	:	unID = unID + 1
								hotline2	mlnWdt/2,		_yEtcB,	_fixWdtR - mlnWdt/2,	_yEtcB,	unID	:	unID = unID + 1

								if	frmThkB - mlnThk > eps	then
									line2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk)
									line2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk)
									hotline2	mlnWdt/2,				_yEtcB,	mlnWdt/2,				-(mlnThk + gskThk),	unID	:	unID = unID + 1
									hotline2	_fixWdtR - mlnWdt/2,	_yEtcB,	_fixWdtR - mlnWdt/2,	-(mlnThk + gskThk),	unID	:	unID = unID + 1
								endif
							endif
						endif

					del 1
				del 1
			endif

			!	문
			if	_bDoor	then
				_doorLct = 0
				if	nMln < eps	then
					_doorLct = frmWdtL
					_yDoorPos = -(frmThkL + gskThk)/2
					if	_fixWdtL > eps	then
						_doorLct = _fixWdtL + mlnWdt/2
						_yDoorPos = -(mlnThk + gskThk)/2
					endif
				else
					if	i = 1	then
						_doorLct = frmWdtL
						_yDoorPos = -(frmThkL + gskThk)/2
						if	_fixWdtL > eps	then
							_doorLct = _fixWdtL + mlnWdt/2
							_yDoorPos = -(mlnThk + gskThk)/2
						endif
					else
						_doorLct = mlnWdt/2
						_yDoorPos = -(mlnThk + gskThk)/2
						if	_fixWdtL > eps	then
							_doorLct = _fixWdtL + mlnWdt/2
							_yDoorPos = -(mlnThk + gskThk)/2
						endif
					endif
				endif
				_offsetSlide = 0.030

				add2	_doorLct,	0
					!	문 유형 : 기본형(1Panel)
					if	_doorType = DOOR_1PANEL	then
						!	문 열림유형 : 여닫이
						if	_openType = OPENTYPE_HINGE	then
							add2	0,	_yDoorPos
								!	심볼 방향 : 전면
								if	_symbol = SYMBOL_FRONT | _symbol = SYMBOL_ALL	then
									if	_openDirect = OPENDIRECT_LEFT	then
										pen	symFrmPen
										rect2	0,	0,	_doorThk,	_doorWdt

										pen			symOplinePen
										line_type	symOplineLT

										put	_doorWdt,	0,	1,
											0,			0,	900,
											_doorWdt,	90,	4000+1

										poly2_	nsp/3,	1,	get(nsp)

										line_type	1
									endif
									if	_openDirect = OPENDIRECT_RIGHT	then
										add2	_doorWdt,	0
											mul2	-1,	1
												pen	symFrmPen
												rect2	0,	0,	_doorThk,	_doorWdt

												pen			symOplinePen
												line_type	symOplineLT

												put	_doorWdt,	0,	1,
													0,			0,	900,
													_doorWdt,	90,	4000+1

												poly2_	nsp/3,	1,	get(nsp)

												line_type	1
											del 1
										del 1
									endif
								endif
								!	심볼 방향 : 후면
								if	_symbol = SYMBOL_BACK | _symbol = SYMBOL_ALL	then
									if	_openDirect = OPENDIRECT_LEFT	then
										pen	symFrmPen
										rect2	0,	0,	_doorThk,	-_doorWdt

										pen			symOplinePen
										line_type	symOplineLT

										put	_doorWdt,	0,		1,
											0,			0,		900,
											_doorWdt,	-90,	4000+1

										poly2_	nsp/3,	1,	get(nsp)

										line_type	1
									endif
									if	_openDirect = OPENDIRECT_RIGHT	then
										add2	_doorWdt,	0
											mul2	-1,	1
												pen	symFrmPen
												rect2	0,	0,	_doorThk,	-_doorWdt

												pen			symOplinePen
												line_type	symOplineLT

												put	_doorWdt,	0,		1,
													0,			0,		900,
													_doorWdt,	-90,	4000+1

												poly2_	nsp/3,	1,	get(nsp)

												line_type	1
											del 1
										del 1
									endif
								endif
							del 1
						endif

						!	문 열림유형 : 미닫이
						if	_openType = OPENTYPE_SLIDE	then
							!	심볼 방향 : 전면
							if	_symbol = SYMBOL_FRONT	then
								add2	0,	_offsetSlide
									pen	symFrmPen
									rect2	0,	0,	_doorWdt,	_doorThk

									pen			symOplinePen
									line_type	symOplineLT
										if	_openDirect = OPENDIRECT_LEFT	then
											rect2	0,	0,	-_doorWdt,	_doorThk
										endif
										if	_openDirect = OPENDIRECT_RIGHT	then
											rect2	_doorWdt,	0,	_doorWdt*2,	_doorThk
										endif
									line_type	1
								del 1
							endif

							!	심볼 방향 : 후면
							if	_symbol = SYMBOL_BACK	then
								add2	0,	-(mlnThk + gskThk)
									mul2	1,	-1
										add2	0,	_offsetSlide
											pen	symFrmPen
											rect2	0,	0,	_doorWdt,	_doorThk

											pen			symOplinePen
											line_type	symOplineLT
												if	_openDirect = OPENDIRECT_LEFT	then
													rect2	0,	0,	-_doorWdt,	_doorThk
												endif
												if	_openDirect = OPENDIRECT_RIGHT	then
													rect2	_doorWdt,	0,	_doorWdt*2,	_doorThk
												endif
											line_type	1
										del 1
									del 1
								del 1
							endif
						endif
					endif

					!	문 유형 : 양문형(2Panel)
					if	_doorType = DOOR_2PANEL	then
						!	문 열림유형 : 여닫이
						if	_openType = OPENTYPE_HINGE	then
							add2	0,	_yDoorPos
								!	심볼 방향 : 전면
								if	_symbol = SYMBOL_FRONT | _symbol = SYMBOL_ALL	then
									pen	symFrmPen
									rect2	0,	0,	_doorThk,	_doorWdtL
									add2	_doorWdt,	0
										mul2	-1,	1
											rect2	0,	0,	_doorThk,	_doorWdtR
										del 1
									del 1

									pen			symOplinePen
									line_type	symOplineLT

									put	_doorWdtL,	0,	1,
										0,			0,	900,
										_doorWdtL,	90,	4000+1

									poly2_	nsp/3,	1,	get(nsp)
									add2	_doorWdt,	0
										mul2	-1,	1
											put	_doorWdtR,	0,	1,
												0,			0,	900,
												_doorWdtR,	90,	4000+1

											poly2_	nsp/3,	1,	get(nsp)
										del 1
									del 1

									line_type	1
								endif

								!	심볼 방향 : 후면
								if	_symbol = SYMBOL_BACK | _symbol = SYMBOL_ALL	then
									pen	symFrmPen
									rect2	0,	0,	_doorThk,	-_doorWdtL
									add2	_doorWdt,	0
										mul2	-1,	1
											rect2	0,	0,	_doorThk,	-_doorWdtR
										del 1
									del 1

									pen			symOplinePen
									line_type	symOplineLT

									put	_doorWdtL,	0,		1,
										0,			0,		900,
										_doorWdtL,	-90,	4000+1

									poly2_	nsp/3,	1,	get(nsp)
									add2	_doorWdt,	0
										mul2	-1,	1
											put	_doorWdtR,	0,		1,
												0,			0,		900,
												_doorWdtR,	-90,	4000+1

											poly2_	nsp/3,	1,	get(nsp)
										del 1
									del 1

									line_type	1
								endif
							del 1
						endif

						!	문 열림유형 : 미닫이
						if	_openType = OPENTYPE_SLIDE	then
							!	심볼 방향 : 전면
							if	_symbol = SYMBOL_FRONT	then
								add2	0,	_offsetSlide
									pen	symFrmPen
									rect2	0,	0,	_doorWdt,	_doorThk
									line2	_doorWdt/2,	0,	_doorWdt/2,	_doorThk

									pen			symOplinePen
									line_type	symOplineLT
										rect2	0,			0,	-_doorWdt/2,			_doorThk
										rect2	_doorWdt,	0,	_doorWdt + _doorWdt/2,	_doorThk
									line_type	1
								del 1
							endif

							!	심볼 방향 : 후면
							if	_symbol = SYMBOL_BACK	then
								add2	0,	-(mlnThk + gskThk)
									mul2	1,	-1
										add2	0,	_offsetSlide
											pen	symFrmPen
											rect2	0,	0,	_doorWdt,	_doorThk
											line2	_doorWdt/2,	0,	_doorWdt/2,	_doorThk

											pen			symOplinePen
											line_type	symOplineLT
												rect2	0,			0,	-_doorWdt/2,			_doorThk
												rect2	_doorWdt,	0,	_doorWdt + _doorWdt/2,	_doorThk
											line_type	1
										del 1
									del 1
								del 1
							endif
						endif
					endif
				del 1
			endif


		endif

		add2	mlnGap[i],	0
	next	i

	del (nMln + 1)



endif


end

!-----------------------------------------------------------------------------------------------
"vFrame":
!-----------------------------------------------------------------------------------------------
	pen	symFrmPen

	if	(_frmType = FRAME_BOUNDARY & _frmClass = VFRAME_CORNER)	then
		put	0,						0,						1,
			0,						-(gskThk + _frmThk),	1,
			_frmWdt,				-(gskThk + _frmThk),	1,
			_frmWdt,				-gskThk,				1,
			(_frmWdt + _gskWdt)/2,	-gskThk,				1,
			(_frmWdt + _gskWdt)/2,	0,						1,
			0,						0,						1
	endif

	if	(_frmType = FRAME_MULLION & _frmClass = VFRAME_CORNER) | _frmClass = VFRAME_MULLION	then
		if	iCornerType = CORNER_TYPE1	then
			if	_iMlnType = MLN_TYPE1	then
				put	-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1,
					-_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),	1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),	1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1
			endif

			if	_iMlnType = MLN_TYPE2	then
				put	-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm),									1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),				1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),				1,
					-_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),	1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),	1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),				1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),				1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),				1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm),									1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),									1
			endif
		endif

		if	iCornerType = CORNER_TYPE2	then
			if	_iMlnType = MLN_TYPE1	then
				put	-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1,
					-_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm) + ((_frmWdt - _gskWdt)/2)*tan(_aFrm),	1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),										1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),							1,
					0,			-(gskThk + _frmThk)/cos(_aFrm),														1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),							1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),										1,
					_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm) + ((_frmWdt - _gskWdt)/2)*tan(_aFrm),	1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1
			endif

			if	_iMlnType = MLN_TYPE2	then
				put	-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm),															1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),										1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),										1,
					-_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm) + ((_frmWdt - _gskWdt)/2)*tan(_aFrm),	1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),										1,
					-_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),							1,
					0,			-(gskThk + _frmThk)/cos(_aFrm),														1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - (gskThk + _frmThk)/cos(_aFrm),							1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm),										1,
					_gskWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskThk/cos(_aFrm) + ((_frmWdt - _gskWdt)/2)*tan(_aFrm),	1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),										1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm) - gskCapThk/cos(_aFrm),										1,
					_frmWdt/2,	-(_frmWdt/2)*tan(_aFrm),															1,
					_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1,
					-_gskWdt/2,	-(_gskWdt/2)*tan(_aFrm),															1
			endif
		endif
	endif

	rot2	_aFrm
		poly2_b	nsp/3,	1+2+4,	fillPen,	backPen,	use(nsp)

		for	h = 1	to	(nsp/3) - 2
			hotline2	get(2) + (use(1) - get(1)),	use(2),	unID	:	unID = unID + 1
		next	h
		hotline2	get(2) + (use(1) - get(1)),	get(2) + (use(1) - get(1)),	unID	:	unID = unID + 1
	del 1

return

!-----------------------------------------------------------------------------------------------
"vFrame_D":
!-----------------------------------------------------------------------------------------------
	pen	symFrmPen

	if	iMlnType = MLN_TYPE1	then
		put	-_gskWdt/2,	0,					1,
			-_gskWdt/2,	-gskThk,			1,
			-_frmWdt/2,	-gskThk,			1,
			-_frmWdt/2,	-(gskThk + mlnThk),	1,
			_frmWdt/2,	-(gskThk + mlnThk),	1,
			_frmWdt/2,	-gskThk,			1,
			_gskWdt/2,	-gskThk,			1,
			_gskWdt/2,	0,					1,
			-_gskWdt/2,	0,					1
	endif

	if	iMlnType = MLN_TYPE2	then
		put	-_frmWdt/2,	0,					1,
			-_frmWdt/2,	-gskCapThk,			1,
			-_gskWdt/2,	-gskCapThk,			1,
			-_gskWdt/2,	-gskThk,			1,
			-_frmWdt/2,	-gskThk,			1,
			-_frmWdt/2,	-(gskThk + mlnThk),	1,
			_frmWdt/2,	-(gskThk + mlnThk),	1,
			_frmWdt/2,	-gskThk,			1,
			_gskWdt/2,	-gskThk,			1,
			_gskWdt/2,	-gskCapThk,			1,
			_frmWdt/2,	-gskCapThk,			1,
			_frmWdt/2,	0,					1,
			-_frmWdt/2,	0,					1,
			-_frmWdt/2,	0,					1
	endif

	poly2_b	nsp/3,	1+2+4,	fillPen,	backPen,	use(nsp)

	for	h = 1	to	(nsp/3) - 2
		hotline2	get(2) + (use(1) - get(1)),	use(2),	unID	:	unID = unID + 1
	next	h
	hotline2	get(2) + (use(1) - get(1)),	get(2) + (use(1) - get(1)),	unID	:	unID = unID + 1

return