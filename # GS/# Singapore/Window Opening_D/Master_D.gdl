

!======================================================================================================
!	Window Maker(Opening_D) 20 
!======================================================================================================
!   DATE : 2017/4/12 WED
!   VER : AC 20
!	DEV : JO HYUNG JUN



!----------------------------------------------------------------------------------------------
!  General
!----------------------------------------------------------------------------------------------
EPS = 0.00001

	!	2D Representation
	!------------------------------------------------------------------------------------------------------
	!	2D Detail Index (iDetail_2D)
	DETAIL_2D_MVO = 1
	DETAIL_2D_SIMPLE = 2
	DETAIL_2D_MIDDLE = 3
	DETAIL_2D_DETAIL = 4
	DETAIL_2D_OFF = 5


!----------------------------------------------------------------------------------------------
!  General Caculation
!----------------------------------------------------------------------------------------------

	!	Wall Thickness
	!------------------------------------------------------------------------------------------------------
	if	bCall	then

		!	Wall Total Thickness
		!------------------------------------------------------------------------------------------------------
		wallthickTmp = 0

		for	i = 1	to	WALL_SKINS_NUMBER
			wallthickTmp = wallthickTmp + WALL_SKINS_PARAMS[i][2]
		next i

		if	WALL_COMPS_NAME = ""	then	
			mWall_thick = WALL_THICKNESS
		else
			mWall_thick = wallthickTmp
		endif


		!	Wall Sub Thickness
		!------------------------------------------------------------------------------------------------------
		!	WALL_SKINS_PARAMS Index	
		THICK = 2
		CORE_STATUS = 6

		!	CORE_STATUS Index
		CORE_STATUS_CORE = 1
		CORE_STATUS_CORE2 = 3

		!	Wall Sub Thickness
		mWall_thick_skin_front = 0
		mWall_thick_core = 0
		mWall_thick_skin_back = 0
		for i = 1	to	WALL_SKINS_NUMBER		
			if	WALL_SKINS_PARAMS[i][CORE_STATUS] = CORE_STATUS_CORE | WALL_SKINS_PARAMS[i][CORE_STATUS] = CORE_STATUS_CORE2	then
				mWall_thick_core = mWall_thick_core+WALL_SKINS_PARAMS[i][THICK]
			else
				if	mWall_thick_core < EPS	then
					mWall_thick_skin_front = mWall_thick_skin_front + WALL_SKINS_PARAMS[i][THICK]
				else
					mWall_thick_skin_back = mWall_thick_skin_back + WALL_SKINS_PARAMS[i][THICK]
				endif	
			endif		
		next i

	endif


	!	Coordinate
	!----------------------------------------------------------------------------------------------
	dim	mOffsetTmp[],	mOpening_Coordinate[][]

	for	i = 1	to	iCoordinate_num

		!	Define and Insert Values
		if	i = 1	then
			mOffsetTmp[i] = mLayout_Offset[1]
			mOffsetTmp[iCoordinate_num] = mLayout_Offset[iCoordinate_num]

			mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[i]
			mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[iCoordinate_num]
		else
			if	i # iCoordinate_num	then	numTmp = i + 1
			if	i = iCoordinate_num	then	numTmp = 1

				if	mLayout_Coordinate[i][1] > mLayout_Coordinate[numTmp][1] and mLayout_Coordinate[i-1][2] < mLayout_Coordinate[i][2]	then
					mOffsetTmp[i] = mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[i]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[numTmp]
				endif
				if	mLayout_Coordinate[i][1] > mLayout_Coordinate[numTmp][1] and mLayout_Coordinate[i-1][2] > mLayout_Coordinate[i][2]	then
					mOffsetTmp[i] = -mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[i]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[numTmp]
				endif

				if	mLayout_Coordinate[i][1] < mLayout_Coordinate[numTmp][1] and mLayout_Coordinate[i-1][2] < mLayout_Coordinate[i][2]	then
					mOffsetTmp[i] = mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = -mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[i]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[numTmp]
				endif
				if	mLayout_Coordinate[i][1] < mLayout_Coordinate[numTmp][1] and mLayout_Coordinate[i-1][2] > mLayout_Coordinate[i][2]	then
					mOffsetTmp[i] = -mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = -mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[i]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[numTmp]
				endif

				if	mLayout_Coordinate[i-1][1] > mLayout_Coordinate[i][1] and mLayout_Coordinate[i][2] < mLayout_Coordinate[numTmp][2]	then
					mOffsetTmp[i] = mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[numTmp]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[i]
				endif
				if	mLayout_Coordinate[i-1][1] > mLayout_Coordinate[i][1] and mLayout_Coordinate[i][2] > mLayout_Coordinate[numTmp][2]	then
					mOffsetTmp[i] = mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = -mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[numTmp]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[i]
				endif

				if	mLayout_Coordinate[i-1][1] < mLayout_Coordinate[i][1] and mLayout_Coordinate[i][2] < mLayout_Coordinate[numTmp][2]	then
					mOffsetTmp[i] = -mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[numTmp]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[i]
				endif
				if	mLayout_Coordinate[i-1][1] < mLayout_Coordinate[i][1] and mLayout_Coordinate[i][2] > mLayout_Coordinate[numTmp][2]	then
					mOffsetTmp[i] = -mLayout_Offset[i-1]
					mOffsetTmp[numTmp] = -mLayout_Offset[i]

					mOpening_Coordinate[i][1] = mLayout_Coordinate[i][1] + mOffsetTmp[numTmp]
					mOpening_Coordinate[i][2] = mLayout_Coordinate[i][2] + mOffsetTmp[i]
				endif

		endif

	next i

	!	Opening Width / Height
	!----------------------------------------------------------------------------------------------
	if	iCoordinate_num = 4	then
		_OpeningWidth = mOpening_Coordinate[4][1] - mOpening_Coordinate[1][1]
		_OpeningHeight = mOpening_Coordinate[2][2] - mOpening_Coordinate[1][2]

		mOpeningWidth = _OpeningWidth
		mOpeningHeight = _OpeningHeight
	endif



!----------------------------------------------------------------------------------------------
!  MVO
!----------------------------------------------------------------------------------------------
	!	2D Representation
	!------------------------------------------------------------------------------------------------------
	!	2D Detail Transfer in MVO
	if	iDetail_2D_callvalue = 0	then
		success = LIBRARYGLOBAL ("LG_DWSymbSettings", "iWindowMVODetlevel2D", reqWindowMVODetlevel2D)
		if success > 0 then
			iMVODetlevel2D = reqWindowMVODetlevel2D
		endif

		!	'iMVODetlevel2D' Index
		! 31 = `Detailed`
		! 22 = `Middle 2`
		! 21 = `Middle 1`
		! 13 = `Simple 2 (Wall Centerline)`
		! 11 = `Simple 1`

		!	Value Transfer
		if	iMVODetlevel2D = 31 | iMVODetlevel2D = 22	then	iDetail_2D = DETAIL_2D_DETAIL
		if	iMVODetlevel2D = 21							then	iDetail_2D = DETAIL_2D_MIDDLE
		if	iMVODetlevel2D = 13 | iMVODetlevel2D = 11	then	iDetail_2D = DETAIL_2D_SIMPLE
	else
		!	메인 객체에서 콜 받을때에는 콜값을 적용한다.
		iDetail_2D = iDetail_2D_callvalue
	endif



!----------------------------------------------------------------------------------------------
!  Definition of Parameter
!----------------------------------------------------------------------------------------------
!	Door Type
Type_Door = 1
Type_Door_M = 2
Type_DoubleDoor = 3
Type_DoubleDoor_A = 4
Type_SlidingDoor = 5

	if	GLOB_SCRIPT_TYPE <> 2 and GLOB_SCRIPT_TYPE <> 3	then
		dim	stOpeningType[]
			stOpeningType[1] = "Door"
			stOpeningType[2] = "Door Mirrored"
			stOpeningType[3] = "Double Door"
			stOpeningType[4] = "Double Door Asymmetric"
			stOpeningType[5] = "Sliding Door"
	endif

!	Door Panel Type
dim stDoorTypes[77]
	stDoorTypes[ 1]	= `Style 1`
	stDoorTypes[ 2]	= `Style 27`
	stDoorTypes[ 3]	= `Style 18`
	stDoorTypes[ 4]	= `Style 19`
	stDoorTypes[ 5]	= `Style 2`
	stDoorTypes[ 6]	= `Style 4`
	stDoorTypes[ 7]	= `Style 6`
	stDoorTypes[ 8]	= `Style 3`
	stDoorTypes[ 9]	= `Style 5`
	stDoorTypes[10] = `Style 7`
	stDoorTypes[11] = `Style 8`
	stDoorTypes[12] = `Style 9`
	stDoorTypes[13] = `Style 34`
	stDoorTypes[14] = `Style 35`
	stDoorTypes[15] = `Style 40`
	stDoorTypes[16] = `Style 36`
	stDoorTypes[17] = `Style 41`
	stDoorTypes[18] = `Style 42`
	stDoorTypes[19] = `Style 43`
	stDoorTypes[20] = `Style 45`
	stDoorTypes[21] = `Style 46`
	stDoorTypes[22] = `Style 53`
	stDoorTypes[23] = `Style 54`
	stDoorTypes[24] = `Style 55`
	stDoorTypes[25] = `Style 56`
	stDoorTypes[26] = `Style 57`
	stDoorTypes[27] = `Style 58`
	stDoorTypes[28] = `Style 17`
	stDoorTypes[29] = `Style 21`
	stDoorTypes[30] = `Style 37`
	stDoorTypes[31] = `Style 22`
	stDoorTypes[32] = `Style 38`
	stDoorTypes[33] = `Style 39`
	stDoorTypes[34] = `Style 20`
	stDoorTypes[35] = ``
	stDoorTypes[36] = ``
	stDoorTypes[37] = ``
	stDoorTypes[38] = ``
	stDoorTypes[39] = ``
	stDoorTypes[40] = ``
	stDoorTypes[41] = ``
	stDoorTypes[42] = ``
	stDoorTypes[43]	= ``
	stDoorTypes[44]	= ``
	stDoorTypes[45] = `French Leaf`
	stDoorTypes[46] = `No Grid`
	stDoorTypes[47]	= `H-V Grid`
	stDoorTypes[48] = `Prairie Style`
	stDoorTypes[49] = `Custom Panel`
	stDoorTypes[50] = ``
	stDoorTypes[51] = `Style 48`
	stDoorTypes[52] = `Style 49`
	stDoorTypes[53]	= `Style 50`
	stDoorTypes[54]	= `Style 52`
	stDoorTypes[55] = `Style 51`
	stDoorTypes[56] = `Style 28`
	stDoorTypes[57] = `Style 10`
	stDoorTypes[58] = `Style 11`
	stDoorTypes[59] = `Style 12`
	stDoorTypes[60] = `Style 13`
	stDoorTypes[61] = `Style 31`
	stDoorTypes[62] = `Style 32`
	stDoorTypes[63]	= `Style 33`
	stDoorTypes[64]	= `Style 44`
	stDoorTypes[65] = `Style 47`
	stDoorTypes[66] = `Style 24`
	stDoorTypes[67] = `Style 25`
	stDoorTypes[68] = `Style 26`
	stDoorTypes[69] = `Style 15`
	stDoorTypes[70] = `Style 23`
	stDoorTypes[71] = `Style 29`
	stDoorTypes[72] = `Style 30`
	stDoorTypes[73]	= `Style 14`
	stDoorTypes[74]	= `Style 16`
	stDoorTypes[75] = ``
	stDoorTypes[76] = `Style 59`
	stDoorTypes[77] = `Style 60`

!	Door Direction
Direct_Normal = 1
Direct_Reversed = 2

	if	GLOB_SCRIPT_TYPE <> 2 and GLOB_SCRIPT_TYPE <> 3	then
		dim	stDirect[]
			stDirect[1] = "Normal"
			stDirect[2] = "Reversed"
	endif

	!	Status
	!------------------------------------------------------------------------------------------------------
	aSymbol_rotangle = SYMB_ROTANGLE
	stSymbol_orientation = WIDO_ORIENTATION
	iSymbol_reveal_side = WIDO_REVEAL_SIDE
	iSymbol_mirrored = SYMB_MIRRORED

