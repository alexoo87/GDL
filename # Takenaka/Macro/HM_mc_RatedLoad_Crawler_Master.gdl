!===============================================================================================
!	TAKENAKA CRANE LIBRARY 
!===============================================================================================
!	DATE : 2018/7/16 THU
!	VER : AC 20

!-----------------------------------------------------------------------------------------------
!	General
!-----------------------------------------------------------------------------------------------
EPS = 0.0001

!-----------------------------------------------------------------------------------------------
!	Sorting DB File Name
!-----------------------------------------------------------------------------------------------
_stListName = HM_ListName

!	Sorting Crane Name
_sep = "_"
_lenListName = strlen(_stListName)
_iSepPos = strstr(_stListName,	_sep)
_stCraneName = strsub(_stListName,	1,	(_iSepPos - 1))
_stListName_Rev01 = strsub(_stListName,	(_iSepPos + 1),	_lenListName)

!	Sorting Boom Type
_sep = "_"
_lenListName_Rev01 = strlen(_stListName_Rev01)
_iSepPos = strstr(_stListName_Rev01,	_sep)
if	_iSepPos < eps	then
	_stBoomType = _stListName_Rev01
	_stListName_Rev02 = ""
else
	_stBoomType = strsub(_stListName_Rev01,	1,	(_iSepPos - 1))
	_stListName_Rev02 = strsub(_stListName_Rev01,	(_iSepPos + 1),	_lenListName_Rev01)
endif

!	Sorting Boom Type(Main, Sub)
_sep = ","
_lenBoomType = strlen(_stBoomType)
_iSepPos = strstr(_stBoomType,	_sep)
if	_iSepPos < eps	then
	_stBoomType_Main = ""
	_stBoomType_Sub = ""
else
	_stBoomType_Main = strsub(_stBoomType,	1,	(_iSepPos - 1))
	_stBoomType_Sub = strsub(_stBoomType,	(_iSepPos + 1),	_lenBoomType)
endif

!	Sorting Option
_lenListName_Rev02 = strlen(_stListName_Rev02)
if	_lenListName_Rev02 > eps	then
	_stOption = _stListName_Rev02
else
	_stOption = ""
endif

!	Define Type
if	_stBoomType_Main = ""	then
	_typeName = _stBoomType
else
	_typeName = _stBoomType_Main
endif

!	Insert Values
! parameters	stCraneName = _stCraneName,
! 			stBoomType = _stBoomType,
! 			stBoomType_Main = _stBoomType_Main,
! 			stBoomType_Sub = _stBoomType_Sub,
! 			stOption = _stOption,
! 			typeName = _typeName

_bType1 = (_typeName = "メインブーム") | (_typeName = "ロングブーム")	 | (_typeName = "ヘビーブーム") | (_typeName = "主ブーム") | (_typeName = "補助シーブ") \
			| (_typeName = "補助シーブ付き主ブーム") | (_typeName = "第３ウインチ使用時の主ブーム") | (_typeName = "第３ウインチ使用時の補助シーブ付き主ブーム")		!	Type that has only Main Boom
_bType2 = (_typeName = "ラッフィングジブ") | (_typeName = "タワー") 																					!	Type that has Main Boom, Addtional Jib, Boom Angle
_bType3 = (_typeName = "クレーンジブ") | (_typeName = "クレーンジブ付き主ブーム")																			!	Type that has Main Boom, Addtional Jib, Jib Angle

breakpoint	1

!-----------------------------------------------------------------------------------------------
!	DB
!-----------------------------------------------------------------------------------------------
if	_bType1	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
	_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif

breakpoint	1

		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		dim _stBoomL[]

breakpoint	1

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_iDataNum_col
			_stBoomL_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
		next	i

		values	"HM_boomLen"	_stBoomL

breakpoint	1

		!	Find Selected Start Index
		!-----------------------------------------------------------------------------------------------
		_xPosData_idxS = 0
		_nBoom = vardim1(_stBoomL)

		for	i = 1	to	_nBoom
			if	_stBoomL[i] = HM_boomLen	then
				_xPosData_idxS = i
				i = _nBoom
			endif
		next	i

		parameters	xPosData_idxS = _xPosData_idxS

breakpoint	1

		!	Find Working Radius Index
		!-----------------------------------------------------------------------------------------------
		_idx_MinR = 1
		_idx_MaxR = 1

		_bFind_Min = 0
		_bFind_Max = 0

		for	i = 1	to	_iDataNum_row
			_stLoad = ""
			n = input(ch, (_iStart_row + i), 1 + _xPosData_idxS, _stLoad)

			if	i = 1	then
				if	not(_stLoad = "-")	then
					_idx_MinR = i
					_bFind_Min = 1
				endif
			endif

			if	not(i = 1 & i = _iDataNum_row)	then
				if	_stLoad = "-"	then
					if	_bFind_Min	then
						_idx_MaxR = i - 1
						_bFind_Max = 1
						i = _iDataNum_row
					endif
				else
					if	not(_bFind_Min)	then
						_idx_MinR = i
						_bFind_Min = 1
					endif
				endif
			endif

			if	i = _iDataNum_row	then
				if	not(_bFind_Max)	then
					_idx_MaxR = i
				endif
			endif
		next	i

		_nWorkR = _idx_MaxR - _idx_MinR + 1

		!	Working Radius / Min, Max
		!-----------------------------------------------------------------------------------------------
		dim	_rWorkR[]

		for	i = 1	to	_nWorkR
			_stWorkR = ""
			_yPosData_rWork = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rWork), 1, _stWorkR)

			if	_stWorkR = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		_WorkingR_min = _rWorkR[1]
		_WorkingR_max = _rWorkR[_nWorkR]

		parameters	_tWorkR = _rWorkR

breakpoint	1

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]

		for	i = 1	to	_nWorkR
			_stLoad = ""
			_yPosData_rLoad = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rLoad), 1 + _xPosData_idxS, _stLoad)

			if	_stLoad = "↓"	then
				_rLoad[i][1] = _rLoad[i - 1][1]
			else
				stN = split(_stLoad,	"%nt",	_rTemp)
				_rLoad[i][1] = _rTemp
			endif
		next	i

		parameters	_tLoad = _rLoad

breakpoint	1

		!	Find Rated Load
		!-----------------------------------------------------------------------------------------------
			_xPosData_RLoad = 1
			_yPosData_RLoad = 1

			for	i = 1	to	_nWorkR
				if	not(i = _nWorkR)	then
					_bJudge_Low = (HM_WorkingR - _rWorkR[i + 1]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _yPosData_RLoad + 1
					endif
				else
					_bJudge_Low = (HM_WorkingR - _rWorkR[i]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _nWorkR
					endif
				endif
			next	i

			!	Insert Rated Load Value
			_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]

			parameters	_tRatedLoad = _RatedLoad

breakpoint	1

	close	ch
endif

if	_bType2	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
	_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif

		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		n = input(ch,	2,	4,	_nBoom)
		n = input(ch,	3,	4,	_nJib)
		n = input(ch,	2,	6,	_nBoomAng)

		dim _stBoomL[],
			_stJibL[],
			_boomAng[]

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoom
			n = input(ch, (_iStart_row - 2), (1 + ((_nBoomAng*_nJib)*i - (_nBoomAng*_nJib - 1))), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
			_stBoomL_temp = ""
		next	i

		values	"HM_boomLen"	_stBoomL

		!	Horizontal : Jib Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJib
			_stJibL_temp = ""
			n = input(ch, (_iStart_row - 1), (1 + (_nBoomAng*i - (_nBoomAng - 1))), _stJibL_temp)
			if	n = 1 & (_stJibL_temp <> "")	then
				_stJibL[i] = _stJibL_temp
			endif
		next	i

		!	Horizontal : Boom Angle Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoomAng
			_stBoomAng_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stBoomAng_temp)
			if	n = 1 & (_stBoomAng_temp <> "")	then
				stN = split(_stBoomAng_temp, "%n°", _rTemp)
				_boomAng[i] = _rTemp
			endif
		next	i

breakpoint	1

		!	Find Selected Start Index
		!-----------------------------------------------------------------------------------------------
		_xPosData_idxS = 0
		_xPosData_jibLth = 0

		for	i = 1	to	_nBoom
			if	_stBoomL[i] = HM_boomLen	then
				_xPosData_idxS = _xPosData_idxS + ((_nBoomAng*_nJib)*i - (_nBoomAng*_nJib - 1))
				i = _nBoom
			endif
		next	i
			!	for Jib Length List
			_xPosData_jibLth = _xPosData_idxS
		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_xPosData_idxS = (_xPosData_idxS - 1) + (_nBoomAng*i - (_nBoomAng - 1))
				i = _nJib
			endif
		next	i

		for	i = 1	to	_nBoomAng
			if	abs(_boomAng[i] - HM_boomAng) < eps	then
				_xPosData_idxS = _xPosData_idxS + (i - 1)
				i = _nBoomAng
			endif
		next	i

		parameters	xPosData_idxS = _xPosData_idxS

breakpoint	1

		!	Data Check
		!-----------------------------------------------------------------------------------------------
		dim	_dataCheck[]

		!	Load Data for Jib Length List
		for	i = 1	to	(_nBoomAng*_nJib)
			for	j = 1	to	_iDataNum_row	step	10
				n = input(ch, (_iStart_row + j), (_xPosData_jibLth + i), _stLoad_temp)

				if	not(_stLoad_temp = "-")	then
					_dataCheck[i] = 1
					j = _iDataNum_row
				else
					_dataCheck[i] = 0
				endif
			next	j
		next	i

		parameters	_dataCheck = _dataCheck

breakpoint	1

		!	Delete Jib Length on List
		!-----------------------------------------------------------------------------------------------
		dim	_sortList_jibLth[]
		_sortIdx = 1

		for	n = 1	to	_nJib
			_sIdx = 1 + _nBoomAng*(n - 1)
			_eIdx = _nBoomAng + _nBoomAng*(n - 1)

			for	i = _sIdx	to	_eIdx
				if	_dataCheck[i] > eps	then
					_sortList_jibLth[_sortIdx] = _stJibL[n]	:	_sortIdx = _sortIdx + 1
					i = _eIdx
				endif
			next	i
		next	n

		values	"HM_JibLen"	_sortList_jibLth

breakpoint	1

		!	Delete Boom Angle on List
		!-----------------------------------------------------------------------------------------------
		dim	_sortList_boomAng[]
		_idx = 1
		_sortIdx = 1

		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_idx = 1 + _nBoomAng*(i - 1)
				i = _nJib
			endif
		next	i

		for	n = 1	to	_nBoomAng
			if	_dataCheck[_idx] > eps	then
				_sortList_boomAng[_sortIdx] = _boomAng[n]	:	_sortIdx = _sortIdx + 1
			endif

			_idx = _idx + 1
		next	n

		values	"HM_boomAng"	_sortList_boomAng

breakpoint	1

		!	Find Working Radius Index
		!-----------------------------------------------------------------------------------------------
		_idx_MinR = 1
		_idx_MaxR = 1

		_bFind_Min = 0
		_bFind_Max = 0

		for	i = 1	to	_iDataNum_row
			_stLoad = ""
			n = input(ch, (_iStart_row + i), 1 + _xPosData_idxS, _stLoad)

			if	i = 1	then
				if	not(_stLoad = "-")	then
					_idx_MinR = i
					_bFind_Min = 1
				endif
			endif

			if	not(i = 1 & i = _iDataNum_row)	then
				if	_stLoad = "-"	then
					if	_bFind_Min	then
						_idx_MaxR = i - 1
						_bFind_Max = 1
						i = _iDataNum_row
					endif
				else
					if	not(_bFind_Min)	then
						_idx_MinR = i
						_bFind_Min = 1
					endif
				endif
			endif

			if	i = _iDataNum_row	then
				if	not(_bFind_Max)	then
					_idx_MaxR = i
				endif
			endif
		next	i

		_nWorkR = _idx_MaxR - _idx_MinR + 1

		!	Working Radius / Min, Max
		!-----------------------------------------------------------------------------------------------
		dim	_rWorkR[]

		for	i = 1	to	_nWorkR
			_stWorkR = ""
			_yPosData_rWork = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rWork), 1, _stWorkR)

			if	_stWorkR = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		_WorkingR_min = _rWorkR[1]
		_WorkingR_max = _rWorkR[_nWorkR]

		parameters	_tWorkR = _rWorkR

breakpoint	1

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]

		for	i = 1	to	_nWorkR
			_stLoad = ""
			_yPosData_rLoad = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rLoad), 1 + _xPosData_idxS, _stLoad)

			if	_stLoad = "↓"	then
				_rLoad[i][1] = _rLoad[i - 1][1]
			else
				stN = split(_stLoad,	"%nt",	_rTemp)
				_rLoad[i][1] = _rTemp
			endif
		next	i

		parameters	_tLoad = _rLoad

breakpoint	1

		!	Find Rated Load
		!-----------------------------------------------------------------------------------------------
			_xPosData_RLoad = 1
			_yPosData_RLoad = 1

			for	i = 1	to	_nWorkR
				if	not(i = _nWorkR)	then
					_bJudge_Low = (HM_WorkingR - _rWorkR[i + 1]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _yPosData_RLoad + 1
					endif
				else
					_bJudge_Low = (HM_WorkingR - _rWorkR[i]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _nWorkR
					endif
				endif
			next	i

			!	Insert Rated Load Value
			_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]

			parameters	_tRatedLoad = _RatedLoad

breakpoint	1

	close	ch
endif

if	_bType3	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
	_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif

		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		n = input(ch,	2,	4,	_nBoom)
		n = input(ch,	3,	4,	_nJib)
		n = input(ch,	2,	6,	_nJibAng)

		dim _stBoomL[],
			_stJibL[],
			_jibAng[]

breakpoint	1

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoom
			n = input(ch, (_iStart_row - 2), (1 + ((_nJibAng*_nJib)*i - (_nJibAng*_nJib - 1))), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
			_stBoomL_temp = ""
		next	i

		values	"HM_boomLen"	_stBoomL

breakpoint	1

		!	Horizontal : Jib Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJib
			_stJibL_temp = ""
			n = input(ch, (_iStart_row - 1), (1 + (_nJibAng*i - (_nJibAng - 1))), _stJibL_temp)
			if	n = 1 & (_stJibL_temp <> "")	then
				_stJibL[i] = _stJibL_temp
			endif
		next	i

		values	"HM_JibLen"	_stJibL

breakpoint	1

		!	Horizontal : Boom Angle Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJibAng
			_stJibAng_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stJibAng_temp)
			if	n = 1 & (_stJibAng_temp <> "")	then
				stN = split(_stJibAng_temp, "%n°", _rTemp)
				_jibAng[i] = _rTemp
			endif
		next	i

breakpoint	1

		!	Find Selected Start Index
		!-----------------------------------------------------------------------------------------------
		_xPosData_idxS = 0
		_xPosData_jibLth = 0

		for	i = 1	to	_nBoom
			if	_stBoomL[i] = HM_boomLen	then
				_xPosData_idxS = _xPosData_idxS + ((_nJibAng*_nJib)*i - (_nJibAng*_nJib - 1))
			endif
		next	i
			!	for Jib Length List
			_xPosData_jibLth = _xPosData_idxS
		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_xPosData_idxS = (_xPosData_idxS - 1) + (_nJibAng*i - (_nJibAng - 1))
			endif
		next	i

		for	i = 1	to	_nJibAng
			if	abs(_boomAng[i] - HM_boomAng) < eps	then
				_xPosData_idxS = _xPosData_idxS + (i - 1)
				i = _nJibAng
			endif
		next	i

		parameters	xPosData_idxS = _xPosData_idxS

breakpoint	1

		!	Data Check
		!-----------------------------------------------------------------------------------------------
		dim	_dataCheck[]

		!	Load Data for Jib Length List
		for	i = 1	to	(_nJibAng*_nJib)
			for	j = 1	to	_iDataNum_row	step	10
				n = input(ch, (_iStart_row + j), (_xPosData_jibLth + i), _stLoad_temp)

				if	not(_stLoad_temp = "-")	then
					_dataCheck[i] = 1
					j = _iDataNum_row
				else
					_dataCheck[i] = 0
				endif
			next	j
		next	i

		parameters	_dataCheck = _dataCheck

breakpoint	1

		!	Delete Jib Angle on List
		!-----------------------------------------------------------------------------------------------
		dim	_sortList_jibAng[]
		_idx = 1
		_sortIdx = 1

		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_idx = 1 + _nJibAng*(i - 1)
				i = _nJib
			endif
		next	i

		for	n = 1	to	_nJibAng
			if	_dataCheck[_idx] > eps	then
				_sortList_jibAng[_sortIdx] = _jibAng[n]	:	_sortIdx = _sortIdx + 1
			endif

			_idx = _idx + 1
		next	n

		values	"HM_JibAng"	_sortList_jibAng

breakpoint	1

		!	Find Working Radius Index
		!-----------------------------------------------------------------------------------------------
		_idx_MinR = 1
		_idx_MaxR = 1

		_bFind_Min = 0
		_bFind_Max = 0

		for	i = 1	to	_iDataNum_row
			_stLoad = ""
			n = input(ch, (_iStart_row + i), 1 + _xPosData_idxS, _stLoad)

			if	i = 1	then
				if	not(_stLoad = "-")	then
					_idx_MinR = i
					_bFind_Min = 1
				endif
			endif

			if	not(i = 1 & i = _iDataNum_row)	then
				if	_stLoad = "-"	then
					if	_bFind_Min	then
						_idx_MaxR = i - 1
						_bFind_Max = 1
						i = _iDataNum_row
					endif
				else
					if	not(_bFind_Min)	then
						_idx_MinR = i
						_bFind_Min = 1
					endif
				endif
			endif

			if	i = _iDataNum_row	then
				if	not(_bFind_Max)	then
					_idx_MaxR = i
				endif
			endif
		next	i

		_nWorkR = _idx_MaxR - _idx_MinR + 1

		!	Working Radius / Min, Max
		!-----------------------------------------------------------------------------------------------
		dim	_rWorkR[]

		for	i = 1	to	_nWorkR
			_stWorkR = ""
			_yPosData_rWork = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rWork), 1, _stWorkR)

			if	_stWorkR = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		_WorkingR_min = _rWorkR[1]
		_WorkingR_max = _rWorkR[_nWorkR]

		parameters	_tWorkR = _rWorkR

breakpoint	1

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]

		for	i = 1	to	_nWorkR
			_stLoad = ""
			_yPosData_rLoad = _idx_MinR + (i - 1)
			n = input(ch, (_iStart_row + _yPosData_rLoad), 1 + _xPosData_idxS, _stLoad)

			if	_stLoad = "↓"	then
				_rLoad[i][1] = _rLoad[i - 1][1]
			else
				stN = split(_stLoad,	"%nt",	_rTemp)
				_rLoad[i][1] = _rTemp
			endif
		next	i

		parameters	_tLoad = _rLoad

breakpoint	1

		!	Find Rated Load
		!-----------------------------------------------------------------------------------------------
			_xPosData_RLoad = 1
			_yPosData_RLoad = 1

			for	i = 1	to	_nWorkR
				if	not(i = _nWorkR)	then
					_bJudge_Low = (HM_WorkingR - _rWorkR[i + 1]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _yPosData_RLoad + 1
					endif
				else
					_bJudge_Low = (HM_WorkingR - _rWorkR[i]) >= 0

					if	_bJudge_Low	then
						_yPosData_RLoad = _nWorkR
					endif
				endif
			next	i

			!	Insert Rated Load Value
			_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]

			parameters	_tRatedLoad = _RatedLoad

breakpoint	1

	close	ch
endif

!-----------------------------------------------------------------------------------------------
!	Rated Load
!-----------------------------------------------------------------------------------------------
_RatedLoad = _RatedLoad - HM_HookWeight


!-----------------------------------------------------------------------------------------------
!	Color Define
!-----------------------------------------------------------------------------------------------
!	'_JudgementColor'	index
SAFETY = 1
WARNING_YELLOW = 2
WARNING_RED = 3

dim	_stJudgementColor[]
	_stJudgementColor[1] = "SAFETY"
	_stJudgementColor[2] = "WARNING_YELLOW"
	_stJudgementColor[3] = "WARNING_RED"


if	HM_SLweight <= _RatedLoad*(0.9)	then
	_JudgementColor = SAFETY
else
	if	HM_SLweight > _RatedLoad	then
		_JudgementColor = WARNING_RED
	else
		_JudgementColor = WARNING_YELLOW
	endif
endif


