!===============================================================================================
!	TAKENAKA CRANE LIBRARY 
!===============================================================================================
!	DATE : 2018/7/16 THU
!	VER : AC 20

!-----------------------------------------------------------------------------------------------
!	General
!-----------------------------------------------------------------------------------------------
EPS = 0.0001

!-----------------------------------------------------------------------------------------------
!	Sorting DB File Name
!-----------------------------------------------------------------------------------------------
_stListName = HM_ListName

!	Sorting Crane Name
_sep = "_"
_lenListName = strlen(_stListName)
_iSepPos = strstr(_stListName,	_sep)
_stCraneName = strsub(_stListName,	1,	(_iSepPos - 1))
_stListName_Rev01 = strsub(_stListName,	(_iSepPos + 1),	_lenListName)

!	Sorting Boom Type
_sep = "_"
_lenListName_Rev01 = strlen(_stListName_Rev01)
_iSepPos = strstr(_stListName_Rev01,	_sep)
if	_iSepPos < eps	then
	_stBoomType = _stListName_Rev01
	_stListName_Rev02 = ""
else
	_stBoomType = strsub(_stListName_Rev01,	1,	(_iSepPos - 1))
	_stListName_Rev02 = strsub(_stListName_Rev01,	(_iSepPos + 1),	_lenListName_Rev01)
endif

!	Sorting Boom Type(Main, Sub)
_sep = ","
_lenBoomType = strlen(_stBoomType)
_iSepPos = strstr(_stBoomType,	_sep)
if	_iSepPos < eps	then
	_stBoomType_Main = ""
	_stBoomType_Sub = ""
else
	_stBoomType_Main = strsub(_stBoomType,	1,	(_iSepPos - 1))
	_stBoomType_Sub = strsub(_stBoomType,	(_iSepPos + 1),	_lenBoomType)
endif

!	Sorting Option
_lenListName_Rev02 = strlen(_stListName_Rev02)
if	_lenListName_Rev02 > eps	then
	_stOption = _stListName_Rev02
else
	_stOption = ""
endif

!	Define Type
if	_stBoomType_Main = ""	then
	_typeName = _stBoomType
else
	_typeName = _stBoomType_Main
endif

_bType1 = (_typeName = "メインブーム") | (_typeName = "ロングブーム")	 | (_typeName = "ヘビーブーム") | (_typeName = "主ブーム") | (_typeName = "補助シーブ")	!	Type that has only Main Boom
_bType2 = (_typeName = "ラッフィングジブ") | (_typeName = "タワー") 																					!	Type that has Main Boom, Addtional Jib, Boom Angle
_bType3 = (_typeName = "クレーンジブ") | (_typeName = "クレーンジブ付き主ブーム")																			!	Type that has Main Boom, Addtional Jib, Jib Angle

!-----------------------------------------------------------------------------------------------
!	DB
!-----------------------------------------------------------------------------------------------
if	_bType1	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
		_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif


		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작
		_iMax_col = 30											! 수직열 값 입력 최대 수

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		dim	_rWorkR[]
		dim _stBoomL[]

		!	Vertical : Working Radius Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_iDataNum_row
			_stWorkR_temp = ""
			n = input(ch, (_iStart_row + i), 1, _stWorkR_temp)
			if	_stWorkR_temp = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR_temp, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		parameters	_tWorkR = _rWorkR

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_iDataNum_col
			_stBoomL_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
		next	i

		values	"HM_boomLen"	_stBoomL

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]
		_stLoad_temp = 0

		for	iCol = 1	to	_iDataNum_col
			for	iRow = 1	to	_iDataNum_row
				n = input(ch, (_iStart_row + iRow), (1 + iCol), _stLoad_temp)
				if	_stLoad_temp <> "-"	then
					if	_stLoad_temp = "↓"	then
						_rLoad[iRow][iCol] = _rLoad[iRow-1][iCol]
					else
						stN = split(_stLoad_temp, "%nt", _rTemp)
						_rLoad[iRow][iCol] = _rTemp
					endif
				else
					_rLoad[iRow][iCol] = 0
				endif
			next	iRow
		next	iCol

		parameters	_tLoad = _rLoad

	!	Value Initialize
	!-----------------------------------------------------------------------------------------------
	if	GLOB_MODPAR_NAME = "HM_ListName"	then
		HM_boomLen = _stBoomL[1]
		parameters	HM_boomLen = HM_boomLen
	endif

	!	Load Range
	!-----------------------------------------------------------------------------------------------
	_xPosData_RLoad = 0
	_yPosData_RLoad = 0

	for	iCol = 1	to	_iDataNum_col
		if	_stBoomL[iCol] = HM_boomLen	then
			_xPosData_RLoad = iCol
			iCol = _iDataNum_col
		endif
	next	iCol

	for	iRow = 1	to	_iDataNum_row
		if	iRow = 1	then
			if	HM_WorkingR <= _rWorkR[iRow]	then
				_yPosData_RLoad = iRow
				iRow = _iDataNum_row
			endif
		endif
		if	iRow > 1 & iRow < _iDataNum_row	then
			if	HM_WorkingR > _rWorkR[iRow]	then
				if	HM_WorkingR <= _rWorkR[iRow+1]	then
					_yPosData_RLoad = iRow+1
					iRow = _iDataNum_row
				endif
			else
				if	HM_WorkingR >= _rWorkR[iRow-1]	then
					_yPosData_RLoad = iRow
					iRow = _iDataNum_row
				endif
			endif
		endif
		if	iRow = _iDataNum_row & _yPosData_RLoad = 0	then
			if	HM_WorkingR >= _rWorkR[iRow+1]	then
				_yPosData_RLoad = iRow
				iRow = _iDataNum_row
			endif
		endif
	next	iRow

	if	(_xPosData_RLoad >= 1 & _xPosData_RLoad <= _iDataNum_col) & (_yPosData_RLoad >= 1 & _yPosData_RLoad <= _iDataNum_row)	then
		_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]				!	Load Limit (ton)
	else
		text2	0, 0, "Can not find Crane suspended load limit."
		end
	endif

	parameters	_tRatedLoad = _RatedLoad
	parameters	aa = _iDataNum_row
	parameters	ab = _yPosData_RLoad

	close	ch
endif

if	_bType2	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
	_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif


		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작
		_iMax_col = 30											! 수직열 값 입력 최대 수

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		n = input(ch,	2,	4,	_nBoom)
		n = input(ch,	3,	4,	_nJib)
		n = input(ch,	2,	6,	_nBoomAng)

		dim	_rWorkR[]
		dim _stBoomL[],
			_stJibL[],
			_boomAng[]

		!	Vertical : Working Radius Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_iDataNum_row
			_stWorkR_temp = ""
			n = input(ch, (_iStart_row + i), 1, _stWorkR_temp)
			if	_stWorkR_temp = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR_temp, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		parameters	_tWorkR = _rWorkR

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoom
			n = input(ch, (_iStart_row - 2), (1 + ((_nBoomAng*_nJib)*i - (_nBoomAng*_nJib - 1))), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
			_stBoomL_temp = ""
		next	i

		values	"HM_boomLen"	_stBoomL

		!	Horizontal : Jib Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJib
			_stJibL_temp = ""
			n = input(ch, (_iStart_row - 1), (1 + (_nBoomAng*i - (_nBoomAng - 1))), _stJibL_temp)
			if	n = 1 & (_stJibL_temp <> "")	then
				_stJibL[i] = _stJibL_temp
			endif
		next	i

		!	Horizontal : Boom Angle Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoomAng
			_stBoomAng_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stBoomAng_temp)
			if	n = 1 & (_stBoomAng_temp <> "")	then
				stN = split(_stBoomAng_temp, "%n°", _rTemp)
				_boomAng[i] = _rTemp
			endif
		next	i

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]
		_stLoad_temp = ""

		!	Find Selected Start Index
		_xPosData_idxS = 0
		_xPosData_jibLth = 0

		for	i = 1	to	_nBoom
			if	_stBoomL[i] = HM_boomLen	then
				_xPosData_idxS = _xPosData_idxS + ((_nBoomAng*_nJib)*i - (_nBoomAng*_nJib - 1))
			endif
		next	i
			!	for Jib Length List
			_xPosData_jibLth = _xPosData_idxS
		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_xPosData_idxS = (_xPosData_idxS - 1) + (_nBoomAng*i - (_nBoomAng - 1))
			endif
		next	i

		parameters	xPosData_idxS = _xPosData_idxS

		for	i = 1	to	_nBoomAng
			for	j = 1	to	_iDataNum_row
				n = input(ch, (_iStart_row + j), (_xPosData_idxS + i), _stLoad_temp)
				if	n = 1	then
					if	not(_stLoad_temp = "-")	then
						if	_stLoad_temp = "↓"	then
							_rLoad[j][i] = _rLoad[j - 1][i]
						else
							stN = split(_stLoad_temp,	"%nt",	_rTemp)
							_rLoad[j][i] = _rTemp
						endif
					else
						_rLoad[j][i] = 0
					endif
				endif
			next	j
		next	i

		parameters	_tLoad = _rLoad

	!	Delete Jib Length on List
	!-----------------------------------------------------------------------------------------------
	dim	_rLoad_jibLth[][]

		!	Load Data for Jib Length List
		for	i = 1	to	(_nBoomAng*_nJib)
			for	j = 1	to	_iDataNum_row
				n = input(ch, (_iStart_row + j), (_xPosData_jibLth + i), _stLoad_temp)
				if	n = 1	then
					if	not(_stLoad_temp = "-")	then
						if	_stLoad_temp = "↓"	then
							_rLoad_jibLth[j][i] = _rLoad_jibLth[j - 1][i]
						else
							stN = split(_stLoad_temp,	"%nt",	_rTemp)
							_rLoad_jibLth[j][i] = _rTemp
						endif
					else
						_rLoad_jibLth[j][i] = 0
					endif
				endif
			next	j
		next	i

	parameters	_tLoad_jibLth = _rLoad_jibLth

	dim	_sortList_jibLth[]

	for	n = 1	to	_nJib
		_nCount_rLoad_jibLth = 0
		_sIdx = 1 + _nBoomAng*(n - 1)
		_eIdx = _nBoomAng + _nBoomAng*(n - 1)

		for	i = _sIdx	to	_eIdx
			for	j = 1	to	_iDataNum_row
				if	_rLoad_jibLth[j][i] > eps	then
					_nCount_rLoad_jibLth = _nCount_rLoad_jibLth + 1
					j = _iDataNum_row
				endif
			next	j
		next	i

		if	abs(_nCount_rLoad_jibLth) > eps	then
			_sortList_jibLth[n] = _stJibL[n]
		else
			n = _nJib
		endif
	next	n

	values	"HM_JibLen"	_sortList_jibLth

	!	Delete Boom Angle on List
	!-----------------------------------------------------------------------------------------------
	dim	_sortList_boomAng[]
	_nCount_boomAng = 0

	for	i = 1	to	_nBoomAng
		_nCount_rLoad = 0

		for	 j = 1	to	_iDataNum_row
			if	_rLoad[j][i] > eps	then
				_nCount_rLoad = _nCount_rLoad + 1
				j = _iDataNum_row
			endif
		next	j

		if	_nCount_rLoad > eps	then
			_sortList_boomAng[i] = _boomAng[i]
			_nCount_boomAng = _nCount_boomAng + 1
		endif
	next	i

	if	_nCount_boomAng > eps	then
		values	"HM_boomAng"	_sortList_boomAng

		!	Find Rated Load
		_xPosData_RLoad = 0

		for	i = 1	to	_nBoomAng
			if	abs(_boomAng[i] - HM_boomAng) < eps	then
				_xPosData_RLoad = i
			endif
		next	i

		_yPosData_RLoad = 1

		for	i = 1	to	_iDataNum_row
			if	not(i = _iDataNum_row)	then
				_bJudge_Low = (HM_WorkingR - _rWorkR[i + 1]) >= 0

				if	_bJudge_Low	then
					_yPosData_RLoad = _yPosData_RLoad + 1
				endif
			else
				_bJudge_Low = (HM_WorkingR - _rWorkR[i]) >= 0

				if	_bJudge_Low	then
					_yPosData_RLoad = _iDataNum_row
				endif
			endif
		next	i

		parameters	aa = _xPosData_RLoad,
					ab = _yPosData_RLoad

		!	Insert Rated Load Value
		_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]

		parameters	_tRatedLoad = _RatedLoad
	endif


	!	Value Initialize
	!-----------------------------------------------------------------------------------------------
	if	GLOB_MODPAR_NAME = "HM_ListName"	then
		HM_boomLen = _stBoomL[1]
		HM_JibLen = _stJibL[1]
		parameters	HM_boomLen = HM_boomLen,
					HM_JibLen = HM_JibLen
	endif

	! if	GLOB_MODPAR_NAME = "HM_boomLen"	then
	! 	parameters	HM_JibLen = _stJibL[1]
	! endif

	close	ch
endif

if	_bType3	then
	!	Call Text file 
	!-----------------------------------------------------------------------------------------------
	_stCraneTXT = HM_ListName + ".txt"
	ch = open("TEXT", _stCraneTXT, "library")
	if	ch <> 1	then
		text2	0, 0, "Can not find Crane Text File. Please check DB folder."
		end
	endif


		!	Data Check
		!-----------------------------------------------------------------------------------------------
		_iStart_row = 7											! 7번째 데이터부터 시작
		_iMax_col = 30											! 수직열 값 입력 최대 수

		n = input(ch,	2,	2,	_nData_Row)
		n = input(ch,	3,	2,	_nData_Col)

		_iDataNum_row = _nData_Row							! 데이터 수 (수평 열)
		_iDataNum_col = _nData_Col							! 데이터 수 (수직 열)

		n = input(ch,	2,	4,	_nBoom)
		n = input(ch,	3,	4,	_nJib)
		n = input(ch,	2,	6,	_nJibAng)

		dim	_rWorkR[]
		dim _stBoomL[],
			_stJibL[],
			_jibAng[]

		!	Vertical : Working Radius Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_iDataNum_row
			_stWorkR_temp = ""
			n = input(ch, (_iStart_row + i), 1, _stWorkR_temp)
			if	_stWorkR_temp = "↓"	then
				_rWorkR[i] = _rWorkR[i - 1]
			else
				stN = split(_stWorkR_temp, "%nm", _rTemp)
				_rWorkR[i] = _rTemp
			endif
		next	i

		parameters	_tWorkR = _rWorkR

		!	Horizontal : Boom Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nBoom
			n = input(ch, (_iStart_row - 2), (1 + ((_nJibAng*_nJib)*i - (_nJibAng*_nJib - 1))), _stBoomL_temp)
			if	n = 1 & (_stBoomL_temp <> "")	then
				_stBoomL[i] = _stBoomL_temp
			endif
			_stBoomL_temp = ""
		next	i

		values	"HM_boomLen"	_stBoomL

		!	Horizontal : Jib Length Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJib
			_stJibL_temp = ""
			n = input(ch, (_iStart_row - 1), (1 + (_nJibAng*i - (_nJibAng - 1))), _stJibL_temp)
			if	n = 1 & (_stJibL_temp <> "")	then
				_stJibL[i] = _stJibL_temp
			endif
		next	i

		values	"HM_JibLen"	_stJibL

		!	Horizontal : Boom Angle Value
		!-----------------------------------------------------------------------------------------------
		for	i = 1	to	_nJibAng
			_stJibAng_temp = ""
			n = input(ch, _iStart_row, (1 + i), _stJibAng_temp)
			if	n = 1 & (_stJibAng_temp <> "")	then
				stN = split(_stJibAng_temp, "%n°", _rTemp)
				_jibAng[i] = _rTemp
			endif
		next	i

		values	"HM_jibAng"	_jibAng

		!	Load Data Import
		!-----------------------------------------------------------------------------------------------
		dim	_rLoad[][]
		_stLoad_temp = ""

		!	Find Selected Start Index
		_xPosData_idxS = 0
		_xPosData_jibLth = 0

		for	i = 1	to	_nBoom
			if	_stBoomL[i] = HM_boomLen	then
				_xPosData_idxS = _xPosData_idxS + ((_nJibAng*_nJib)*i - (_nJibAng*_nJib - 1))
			endif
		next	i
			!	for Jib Length List
			_xPosData_jibLth = _xPosData_idxS
		for	i = 1	to	_nJib
			if	_stJibL[i] = HM_JibLen	then
				_xPosData_idxS = (_xPosData_idxS - 1) + (_nJibAng*i - (_nJibAng - 1))
			endif
		next	i

		parameters	xPosData_idxS = _xPosData_idxS

		for	i = 1	to	_nJibAng
			for	j = 1	to	_iDataNum_row
				n = input(ch, (_iStart_row + j), (_xPosData_idxS + i), _stLoad_temp)
				if	n = 1	then
					if	not(_stLoad_temp = "-")	then
						if	_stLoad_temp = "↓"	then
							_rLoad[j][i] = _rLoad[j - 1][i]
						else
							stN = split(_stLoad_temp,	"%nt",	_rTemp)
							_rLoad[j][i] = _rTemp
						endif
					else
						_rLoad[j][i] = 0
					endif
				endif
			next	j
		next	i

		parameters	_tLoad = _rLoad

		!	Find Rated Load
		_xPosData_RLoad = 0

		for	i = 1	to	_nJibAng
			if	abs(_boomAng[i] - HM_jibAng) < eps	then
				_xPosData_RLoad = i
			endif
		next	i

		_yPosData_RLoad = 1

		for	i = 1	to	_iDataNum_row
			if	not(i = _iDataNum_row)	then
				_bJudge_Low = (HM_WorkingR - _rWorkR[i + 1]) >= 0

				if	_bJudge_Low	then
					_yPosData_RLoad = _yPosData_RLoad + 1
				endif
			else
				_bJudge_Low = (HM_WorkingR - _rWorkR[i]) >= 0

				if	_bJudge_Low	then
					_yPosData_RLoad = _iDataNum_row
				endif
			endif
		next	i

		parameters	aa = _xPosData_RLoad,
					ab = _yPosData_RLoad

		!	Insert Rated Load Value
		_RatedLoad = _rLoad[_yPosData_RLoad][_xPosData_RLoad]

		parameters	_tRatedLoad = _RatedLoad


	!	Value Initialize
	!-----------------------------------------------------------------------------------------------
	if	GLOB_MODPAR_NAME = "HM_ListName"	then
		HM_boomLen = _stBoomL[1]
		HM_JibLen = _stJibL[1]
		parameters	HM_boomLen = HM_boomLen,
					HM_JibLen = HM_JibLen
	endif

	close	ch
endif


!-----------------------------------------------------------------------------------------------
!	Color Define
!-----------------------------------------------------------------------------------------------
!	'_JudgementColor'	index
SAFETY = 1
WARNING_YELLOW = 2
WARNING_RED = 3

dim	_stJudgementColor[]
	_stJudgementColor[1] = "SAFETY"
	_stJudgementColor[2] = "WARNING_YELLOW"
	_stJudgementColor[3] = "WARNING_RED"


if	HM_SLweight <= _RatedLoad*(0.9)	then
	_JudgementColor = SAFETY
else
	if	HM_SLweight > _RatedLoad	then
		_JudgementColor = WARNING_RED
	else
		_JudgementColor = WARNING_YELLOW
	endif
endif


